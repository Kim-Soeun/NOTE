<멀티 스레드>

- 프로세스 :  실행 중인 하나의 애플리케이션

- 스레드 : 보통 하나의 프로세스는 한가지 일을 하지만,
             쓰레드를 이용하면 한 프로세스 내에서 두 가지 이상의 일 동시에 가능

- 멀티 스레드 : 하나의 프로세스에서 두가지 이상의 작업을 처리
          	        멀티 프로세스는 자신의 메모리를 가지고 실행되므로 서로 독립적 
	        하나의 프로세스 내부에 생성되므로 
 	        스레드 하나가 예외발생하면 다른 스레드도 영향 받음        

- 메인 스레드 : 모든 애플리케이션은 메인 스레드가 main() 메소드를 실행하면서 시작
	        작업 스레드들을 만들어 병렬로 코드 실행 가능(동시 실행=멀티테스킹)
                     메인스레드가 작업 스레드보다 먼저 종료되더라도 
                     작업 스레드가 계속 실행중이라면 프로세스는 종료되지 않음
	        
- 작업 스레드 :  모든 애플리케이션은 메인 스레드가 존재하기 때문에 
                     추가적인 병렬 작업의 수만큼 스레드 생성	


1. Thread 클래스로부터 직접 생성

  : Runnable을 매개값으로 갖는 작업 스레드 직접 생성
   Runnable은 인터페이스 타입, 구현 객체를 만들어 대입해야 함
   구현 클래스는 run()을 재정의해서 작업 스레드가 실행할 코드 작성
   start() 메소드 호출해야 작업 스레드 실행됨

   ex) Thread thread = new Thread(Runnable target);	// 

       **구현 클래스**  
         
        Class Task implements Runnable {
          public void run() {
           스레드가 실행할 코드;
          }
        }

        ** main 구문 **

          Runnable task = new Task();
          Thread thread = new Thread(task);	 


   : Thread 생성자를 호출할 때 Runnable 익명 객체를 매개값으로 사용
     start() 메소드 호출해야 작업 스레드 실행됨
		
  ex) Thread thread = new Thread(new Runnable) {
       public void run() {
        스레드가 실행할 코드;
        } 
      } );


2. Thread 하위 클래스로부터 생성

 -  Thread 하위 클래스로 작업 스레드를 정의 -> 작업 내용 포함
 - 작업 스레드 클래스 정의 하는 방법 
    : Thread 클래스 상속 후 run() 메소드 재정의

 ex) public class Worder Thread extends Thread {
      @Override
      public void run() {
         스레드가 실행할 코드;
       }
     }
    Thread thread = new WorkerThread();


    : Thread 익명 객체로 작업 스레드 객체를 생성할 수 있음

  ex) Thread thread = new Thread() {
        public void run() {
         스레드가 실행할 코드;
       }
     };  
 	 


< 스레드 이름 >

- 메인 스레드 이름 : main
- 직접 생성한 스레드 이름 : Thread-n(n : 스레드의 번호)
- thread.setName("스레드 이름");   -> 스레드 이름 변경
- thread.getName(); 	        -> 스레드 이름 호출

