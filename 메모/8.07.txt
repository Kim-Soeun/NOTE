<컬렉션 프레임워크>

-  다수의 데이터를 쉽고 효과적으로 처리할 수 있는 
   표준화된 방법을 제공하는 클래스의 집합

- 데이터를 저장하는 자료 구조와 데이터를 처리하는 알고리즘을 구조화하여 클래스로 구현




<주요 인터페이스> 

  1. List 인터페이스(List 컬렉션)

- 순서가 있는 데이터의 집합, 데이터의 중복을 허용
- 구현 클래스 : Vector, ArrayList, LinkedList, Stack, Queue



** ArrayList **

- List 인터페이스의 대표적인 구현 클래스

- 객체 생성 방법 : List<String> list = new ArrayList<String>();
                   List<String> list = new ArrayList<>();

- 기본 생성자로 ArrayList 객체 생성하면 내부에 10개의 객체를 저장할 수 있는
  초기 용량 가짐, 저장되는 객체 수 늘어나면 자동으로 용량 증가

- 객체 추가하면 0번 인덱스부터 차례대로 저장

- 인덱스 객체 제거하면 바로 뒤 인덱스부터 마지막까지 모두 1씩 당겨짐

- 객체 추가, 검색, 삭제하는 방법

 ex) List<String> list = new ArrayList<String>();
     list.add("Java");			// String 객체 저장
     int size = list.size();		// 저장된 총 객체수 얻기
     String skill = list.get(2);	// 2번 인덱스의 객체 얻기
     list.remove(2);			// 2번 인덱스 객체 삭제



** Vector **

- 객체 생성 방법 : List<E> list = new Vector<E>();
		   List<E> list = new Vector<>();

- 동기화된 메소드로 구성되어 있기 때문에 멀티 스레드가 동시에 메소드 실행 X
- 하나의 스레드가 메소드를 실행 완료해야만 다른 스레드가 메소드를 실행할 수 있음
- 멀티 스레드 환경에서 안전하게 객체 추가, 삭제 가능




** Linked List **

- ArrayList와 사용 방법 같으나 내부 구조 다름
- 객체 생성 방법 : List<E> list = new LinkedList<E>();
                   List<E> list = new LinkedList<>();

- 인덱스 번호 있지 않음
- 특정 인덱스의 객체를 제거하면 앞뒤 링크만 변경되고 나머지 링크는 변경되지 않음
  (체인 형식으로 이루어져 있어 순방향, 역방향 검색 가능, 수정 빈번할 때 ArrayList보다 빠름)
- 끝에서부터 추가 또는 삭제하는 경우는 ArrayList가 빠르지만, 
  중간에 추가, 삭제하는 경우는 앞뒤 링크만 정보 변경하면 되는 LinkedList가 더 빠름





  2. Set 인터페이스 

- 순서가 없는 데이터의 집합, 데이터의 중복을 허용하지 않음
- 구현 클래스 : HashSet, TreeSet
- 인덱스로 관리하지 않기 때문에 인덱스를 매개값으로 갖는 메소드가 없음



   + Iterator


- 모든 컬렉션 프레임워크에 공통으로 사용 가능
- 컬렉션 프레임워크에서 쉽게 값을 가져오고 제거할 수 있음
- 3개의 메소드

  1. Iterator.hasNext() : Iterator 안에 다음 값 들어있는지 확인
 			  가져올 다음 값 있으면 true, 없으면 false 리턴
  2. Iterator.next() : Iterator 다음 값 가져오기
  3. Iterator.remove() : 컬렉션에서 값 삭제

 ex) Set<String> set = ...;
     Iterator<String> iterator = set.iterator();
     while(iterator.hasNext()) {    // 저장된 객체 수만큼 루핑
       // String 객체 하나를 가져옴
     String str = iterator.next();
  }



** HashSet **

- 객체 생성 방법 : Set<String> set = nes HashSet<String>();
		   Set<String> set = nes HashSet<>();

- 순서 없이 저장하고 동일한 객체는 중복 저장 x

- 인스턴스가 달라도 내용이 동일하면 같은 객체로 간주하고 중복 저장하지 않기 위해
  hashCode()와 equals() 메소드 재정의




  3. Map 인터페이스

- 키와 값의 한 쌍으로 이루어지는 데이터의 집합, 순서가 없음

  키는 중복을 허용하지 않지만, 값은 중복될 수 있음
 (기존에 저장된 키와 동일한 키로 값을 저장하면 기존의 값 없어지고 새로운 값 대체)

- 구현 클래스 : HashMap, TreeMap, Hashtable, Properties


- 메소드 : put(K key, V value) : 주어진 키로 값 저장(데이터 추가)
           boolean containsKey(Object key) : 주어진 키가 있는지 여부 확인(데이터 확인)
           boolean containsValue(Object value) : 주어진 값이 있는지 여부 확인(데이터 확인)
	   Set<K> keySet() : 저장된 모든 key를 Set에 저장하여 반환 (데이터 반환)
	   Set<Map.Entry<k,v>>entrySet() : 저장된 키와 값을 엔트리(키와 값의 결합)의 형태로 
                                           Set에 저장하여 반환(데이터 반환)
	   	

** HashMap **


- 객체 생성 방법 : Map<String, Integer> map = new HashMap<String, Integer>();
		   Map<String, Integer> map = new HashMap<>();

- 동기화를 지원하지 않음(단일 스레드 사용하기 좋은 구조)




** Hashtable **

- 객체 생성 방법 : Map<String, Integer> map = new Hashtable<String, Integer>();
		   Map<String, Integer> map = new Hashtable<>();

- 동기화를 지원(멀티스레드 환경에서 사용하기 좋은 구조)


