< JSTL >

	
	: JSTL은 JSP에서 빈번하게 사용되는 조건문, 반복문 등을 처리해주는 태그를 모아
	  표준으로 만들어 놓은 라이브러리(lib 폴더에 jstl 파일 다운로드 후 선언해줘야 함)

	  스크림틀릿 없이 태그만으로 작성할 수 있기 때문에 코드가 간결해짐

----------------------------------------------------------------------------------------------

< 태그 종류 >


1. 코어(Core) 태그

	: 변수 선언, 조건문/반복문, URL 처리 대체하는 태그를 제공

   
   1) <c:set> 태그

	: EL에서 사용할 변수나 자바빈즈를 생성할 때 사용
	  JSP에서 영역에 속성을 저장할 때 사용하는 setAttribute() 메소드 같은 역할


	** 변수 생성 방식 **

	<c:set var="변수명" value="값" scope="영역"/>			-- 직접 값 입력
  	<c:set var="변수명" scope="영역">value 속성에 들어갈 값</c:set> -- 태그 사이에 값 지정 

	<EX>

	-- 변수 선언 --

	<c:set var="directVar" value="100"/>
	<c:set var="betweenVar">변수값 요렇게 설정</c:set>

	-- EL 이용한 변수 출력 --

	<li>directVar : ${directVar}</li>    -- '100'출력(scope 없으면 기본값 page)
	<li>betweenVar : ${betweenVar}</li>  -- '변수값 요렇게 설정' 출력	



	** 자바빈즈 or 컬렉션 생성방식 **

	<c:set var="변수명" value="저장할 객체 혹은 컬렉션" scope="영역" />
	<c:set target="var로 설정한 변수명" property="객체의 속성명" value="속성값" />

	EX)

	-- 자바빈즈 생성 --

	<c:set var="personVar2" value="<%=new Person() %>" scope="request" />
	<c:set target="${personVar2}" property="name" value="정약용" />
	
	<li> 이름 : ${personVar2.name} </li>


	-- Map 컬렉션 이용하기 --

	<%
		Map<String, Person> pMap = new HashMap<>();
		pMap.put("personArgs1", new Person("하위지", 65));
	%>

	<c:set var="personMap" value"<%=pMap%>" scope="request"/>

	<li>이름 : ${personMap.personArgs1.name}</li>
	<li>나이 : ${personMap.personArgs1.age}</li>

	

    2) <c:remove> 태그

	: <c:set> 태그로 설정한 변수를 제거할 때 사용
	  JSP에서 영역의 속성을 제거할 때 사용하는 removeAttribute()와 같은 역할

	** 형식 **
	
	<c:remove var="변수명" scope="영역" />
	
	EX) <c:set var="scopeVar" value="Page Value"/>	-- 생성
	    <c:remove var="scopeVar"/>			-- 삭제


    3) <c:if> 태그

	: 자바의 if와 동일하게 제어 구문 작성할 때 사용
	  하지만 else가 별도로 없기 땜누에 일련의 여러 조건을 나열하는 형태로 작성 x


         ** 형식 **
	
	<c:if test="조건" var="변수명" scope="영역"> 
		조건이 true일 때 출력할 문장
	</c:if>

	EX) <c:if test="${number mod 2 eq 0}" var="result"> 
		${number}는 짝수입니다.<br>
	    </c:if>


    4) <c:choose> <c:when> <c:otherwise> 태그

	: 다중 조건을 통해 판단해야 할 때 사용


	** 형식 ** 

	<c:choose>
		<c:when test="조건1">조건1을 만족하는 경우</c:when>
		<c:when test="조건2">조건2를 만족하는 경우</c:when>
		<c:otherwise>아무 조건도 만족하지 않는 경우</c:otherwise>
	</c:choose> 


	EX) <c:choose>
		<c:when test="${avg >= 90}">A 학점</c:when>
		<c:when test="${avg >= 80}">B 학점</c:when>
		<c:otherwise>F 학점</c:otherwise>
	    </c:choose>

  
    5) <c:forEach> 태그

	: 반복문, 자바처럼 두가지 형태로 사용 가능
	  step은 0이하인 정수는 적용 안됨(반복문 증가는 가능, 감소는 불가능)


	** 형식 **

	-- 일반 for문 형태

	    <c:forEach var="변수명" begin="시작값" end="마지막값" step="증가값" />
	ex) <c:forEach  var="i" begin="1" end="3" step="1"></c:forEach> -- 태그 사이 내용 반복됨
	    for (int i=1; i<=3; i++) 와 같음

	-- 향상된 for문 형태

	    <c:forEach var="변수명" items="컬렉션 혹은 배열" />
	ex) <c:forEach items="<%=rgba%>" var="c"></c:forEach>


    6) <c:forTokens> 태그

	: 구분자를 기준으로 문자열을 나눠 토큰의 개수만큼 반복


	** 형식 **
	
	<c:forTokens items="문자열" delims="문자열 구분자" var="변수명" />

	ex) <c:forTokens items="red,green" delims="," var="color" />
		<span style="color: ${color};">${color}</span><br>
	    </c:forTokens>			                   --> red green 각각 출력



    7) <c:import> 태그

	: <jsp:include> 액션 태그와 같이 외부 파일을 현재 위치에 삽입할 때 사용
	  같은 웹 어플리케이션에 속하지 않은 외부의 페이지도 삽입 가능

	** 형식 **

	<c:import url="페이지 경로 혹은 URL" scope="영역" />

	ex) <c:import url="../inc/OtherPage.jsp" var="contents">
		<c:param name="user_param1" value="JSP"/>
	    </c:import>


    8) <c:redirect> 태그

 	: response 내장 객체의 sendRedirect()와 동일하게 페이지 이동 처리

	** 형식 **

	<c:redirect url="이동할 경로 및 URL" />

	ex) <c:redirect url="../inc/OtherPage.jsp"></c:redirect>



    9) <c:url> 태그

	: 지정한 경로와 매개변수를 이용해서 컨텍스트 루트를 포함한 URL을 생성

	** 형식 **

	<c:url value="설정한 경로" scope="영역" />

	ex) <c:url value="/11JSTL/inc/OtherPage.jsp" var="url"/>
	    <a href="${url}">다른 페이지 연결하기</a>


    10) <c:out> 태그

	: JSP의 표현식처럼 변수를 출력할 때 사용

	** 형식 **

	<c:out value="출력할 변수" default="기본값" escapeXaml="특수 문자 처리 유무" />

	ex) <c:out value="${iTag}" escapeXml="false"></c:out>	           
	    -->  escapeXml false로 설정하면 html 적용됨, 기본값은 true
	    
	    <c:out value='${param.name}' default="넘겨온 값이 없습니다."/> 
	    -->  default : value에 값이 없으면 default 출력



    11) <c:catch> 태그

	** 형식 **

	<c:catch var="변수명">실행 코드</c:catch>

	ex) <c:catch var="eMessage">
		<%
		    int result = num1 / 0;
		%>
	    </c:catch>
	    예외 내용 : ${eMessage} 	-- 예외 내용 출력


---------------------------------------------------------------------------------------------


1. 국제화(Formatting) 태그

	: 국가별로 다양한 언어, 날짜, 시간 숫자 형식을 설정할 때 사용
	  다음 지시어 선언 필요함

	 <%@taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>


    1) 숫자 포맷팅 및 파싱

	
	** 형식 **

	<fmt:formatNumber value="출력할 숫자" type="문자열 양식 패턴" var="변수 설정"
	  groupingUsed="구분 기호 사용 여부" pattern="숫자 패턴" scope="영역" />

	ex) <fmt:formatNumber value="${number1}" groupingUsed="false"/>   --> 12345
	    <fmt:formatNumber value="${number1}" type="currency"/>        --> ₩12,345


	<fmt:parseNumber value="파싱할 문자열" type="출력 양식" var="변수 설정"
	  integerOnly="정수만 파싱" pattern="패턴" scope="영역" />

	ex) <fmt:parseNumber value="${number2}" pattern="0,000.00" var="print3"/> --> 6789.01
	    <fmt:parseNumber value="${number2}" integerOnly="true" var="print4"/> --> 6789



    2) 날짜 포맷 및 타임존  

	** 형식 **

	<fmt:formatDate value="출력할 날짜" type="출력 양식" var="변수 설정"
	  dateStyle="날짜 스타일" timeStyle="시간 스타일" pattern="날짜 패턴" scope="영역 />
	

	ex) <fmt:formatDate value="${today}" type="date" dateStyle="full"/> --> 2023년 10월 12일 목요일
	    <fmt:formatDate value="${today}" type="date" dateStyle="long"/> --> 2023년 10월 12일
	    <fmt:formatDate value="${today}" type="date" dateStyle="default"/> -->  2023. 10. 12.
	

	ex) <fmt:timeZone value="America/Chicago">         --> 시카고 현재 시간 출력
		<fmt:formatDate value="${today}" type="both" pattern="yyyy-MM-dd HH:mm:ss"/>
	    </fmt:timeZone>
	


    3) 로케일 설정

	: 국가별로 다른 통화 기호나 날짜를 표현할 때 사용

	ex) <fmt:setLocale value="ja_JP"/>
	    <fmt:formatNumber value="99999" type="currency"></fmt:formatNumber> --> ￥99,999 출력
	
	
 	
