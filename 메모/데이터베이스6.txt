< SQL 데이터 제어문 >


1. 사용자 및 권한 관리



   - 계정 생성 : CREATE USER

 
     ex) create user 'user1'@'127.1.1.1' identified by '1111';
         create user 'user2'@'localhost' identified by '2222';
         -- MySql 서버가 기동 중인 로컬 호스트에서만 접속 허용

         create user 'user3'@'192.168.0.25' identified by '3333';
         -- 특정 ip 주소만 접속 허용

         create user 'user4'@'%' identified by '4444';
         -- 어느 컴퓨터나 자유롭게 접속 허용



    - 권한 부여 : GRANT


      ex) grant insert,update,delete on univdb.* to 'user1'@'127.0.0.1';
	-- 'univDB' 데이터베이스의 모든 테이블들에 insert,update,delete 기능에 대해 user1이 접근 권한 가짐
	-- 127.0.0.1 호스트에서 접근 가능 

	grant all on *.* to 'user4'@'%' with grant option;
	-- 모든 데이터베이스의 모든 테이블들에 접근권한을 user4에게 부여
	-- user4는 다른 사용자에게 권한도 부여할 수 있음

	grant select on univdb.학생 to 'user2'@'localhost';
	-- 'univDB' 데이터베이스의 학생 테이블에 접근권한을 user2에게 부여
	-- localhost로 접근 가능

        show grants for 'user1'@'127.1.1.1';
        -- user1 사용자의 권한 표시

        show grants;
        -- 현재 접속 사용자의 권한 표시




    - 권한 철회 : REVOKE

	ex) revoke delete on univdb. * from 'user1'@'127.1.1.1';
        -- 'user1'에게 부여된 권한 중 univdb의 모든 테이블에 대한 삭제 권한만 철회


    - 계정 삭제 : DROP USER

        ex) drop user 'user1'@'127.1.1.1';
        -- 'user1' 사용자는 모든 권한 취소되고 계정 삭제

 


< 뷰 >


1. 뷰의 개념


   - 개념
 
       :  뷰는 사용자에게 접근이 허용된 자료만을 제한적으로 보여주기 위해 가지는 가상 테이블

	  뷰는 저장장치 내에 물리적으로 존재하지 않지만 사용자에게 있는 것처럼 간주됨

	  뷰는 데이터 보정작업, 처리과정 시험 등 임시적인 작업을 위한 용도로 활용

	  뷰는 조인문의 사용 최소화로 사용상의 편의성을 최대화 


   - 뷰의 장점

       : 편의성, 보안성, 재사용성, 독립성

   


2. 뷰 생성


   - CREATE VIEW문


      ex) create view v1_고학년학생(학생이름, 나이, 성, 학년) 
	  as select 이름, 나이, 성별, 학년 from 학생 where 학년>=3 and 학년<=4;
	 
          -- 3학년 혹은 4학년 학생의 학생이름, 나이, 성, 학년으로 구성된 뷰를 
             'v1_고학년학생'이라는 이름으로 생성


      ex) create view v1_고득점학생(이름, 학번, 점수)
	  as select 이름, 대학생2.학번, 합계 from 대학생2 
 	  join 시험2 on 대학생2.학번=시험2.학번 where 합계>=270;
      
          -- 뷰(고득점학생)   v1_고득점학생 합계가 270점 이상인 학생의
 	    이름, 학번, 점수(합계를 점수로 이름변환) 검색
          -- 뷰에서는 생성하면서 필드명 바로 바꿀 수 있음


       ex) create view V3_고학년여학생 as select * from v1_고학년학생 where 성='여';

          -- 'v1_고학년학생' 뷰를 기반으로 여학생만으로 구성된 뷰를 'V3_고학년여학생' 이름으로 생성
	  -- 뷰에서 뷰를 생성


      ex) create view V2_남학생(이름,학번,학과코드,점수) 
	  as select 대학생2.이름, 대학생2.학번, 대학생2.학과코드, 시험2.합계 
	  from 대학생2 join 시험2 on 대학생2.학번=시험2.학번
	  where 대학생2.성별='M';

         --  대학생2와 시험2 테이블을 활용하여 V2_남학생 뷰를 생성하세요
	     V2_남학생 뷰는 이름, 학번, 학과코드, 점수로 구성



      ex) create view V3_고득점남학생(이름,학번,점수)
	  as select 이름,학번,점수 from V2_남학생 where 점수>=250;

         -- V2_남학생 뷰를 활용하여 V3_고득점남학생 뷰를 생성
	    V3_고득점남학생 이름, 학번, 점수로 구성하되
 	    현재 점수가 250점 이상인 데이터로 구성

         -- 'V2_남학생'은 필드가 4개이고 'V3_고득점남학생'은 필드가 3개이기 때문에
            *로 적지않고 필드를 모두 적어줘야 함
	    
         -- create view V3_고득점남학생(이름,학번,점수)
	    as select * from V2_남학생 where 점수>=250;   // 오류


3. 뷰 활용


    - 뷰를 활용한 검색

      ex) select * from v2_과목수강현황
	  where 수강인원수 = (select max(수강인원수) from v2_과목수강현황) OR
	  수강인원수 = ( select min(수강인원수) from v2_과목수강현황);

         -- 'V2_과목수강현황' 뷰에서 수강생 인원이 가장 많은 과목과
            가장 적은 과목에 대한 과목번호, 강의실, 수강인원수 정보를 검색


4. 뷰 삭제


    - 뷰 삭제 형식

      ex) drop view v1_고학년학생;



5. 인덱스


   - 인덱스 개념 
    
         : 테이블 안의 데이터를 쉽고 빠르게 찾을 수 있도록 만든 데이터베이스 객체


   - 인덱스 생성(create index)

      ex) create index idx_수강 on 수강(학번,과목번호);
	  show index from 수강;
       -- '수강' 테이블의 '학번','과목번호' 열을 대상으로 인덱스 'idx_수강'을 생성

   - 인덱스 삭제(drop index)

      ex) drop index idx_수강 on 수강;
       -- 인덱스 'idx_수강'을 삭제하고 '과목' 테이블의 인덱스 'idx_과목'을 삭제


   - 고려사항

       : 불필요한 인덱스는 오히려 성능을 떨어뜨리고 저장 공간만 낭비할 수 있음
         인덱스는 꼭 필요한 만큼만 효과적으로 생성해야 함


      1) 인덱스 생성이 필요한 경우

	 - 기본키와 외래키의 경우, 인덱스 생성이 바람직. 대부분의 DBMS는 기본키에 대해
           자동으로 인덱스 생성

         - WHERE절 조건식에 자주 사용되는 테이블의 열의 경우, 인덱스 생성이 바람직
 
         - 조인 조건식에 자주 사용되는 테이블 열도 인덱스 생성이 바람직

         - 하나의 테이블에 3-5개 정도의 인덱스가 효과적

         - 가변길이 문자형이나 실수형, 날짜형 열보다는 정수형, 고정길이 문자형 열에 
           인덱스 생성이 바람직

         - ORDER BY 절이나 GROUP BY절에 자주 사용되는 열의 경우, 인덱스 생성을 고려할 수 있음


      2) 인덱스 생성이 불필요한 경우 
        
 	 - 갱신이 빈번한 테이블 열의 경우, 인덱스라 바람직 하지 않음

         - 집계 함수, 내장 함수를 적용하여 열 값을 변형하는 경우, 인덱스가 효과적이지 않음

         - '성별'같은 열처럼 도메인이 작아서 열의 선택도가 높을 경우, 인덱스가 바람직하지 않음

         - 범위 검색을 하는 경우, 인덱스가 바람직하지 않음

         - 테이블의 행 개수가 별로 없는 경우, 인덱스가 바람직하지 않음