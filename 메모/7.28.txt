<동기화 메소드>

** 공유 객체를 사용할 때 주의할 점 **

- 멀티 스레드 프로그램에서 스레드들이 객체를 공유해서 작업할 때, 
  스레드A가 사용하던 객체를 스레드B가 상태를 변경하여
  스레드 A가 의도했던 것과는 다른 결과를 산출할 수도 있음

  ex) User1 스레드가 Calculator 객체의 memory 필드에 100을 먼저 저장하고 
      2초간 일시 정지 상태가 됨. 그동안에 User2 스레드가 memory 필드값을 50으로 변경. 
      2초가 지나 User1 스레드가 다시 실행 상태가 되어 memory 필드값을 출력하면
      User2 스레드가 저장한 50이 출력됨


** 동기화 메소드 **
- 스레드가 사용 중인 객체를 다른 스레드가 변경할 수 없게 하려면 
  작업이 끝날 때까지 객체에 잠금을 걸어서 다른 스레드가 사용할 수 없게 해야 함

- 임계 영역 : 멀티 스레드 프로그램에서 단 하나의 스레드만 실행할 수 있는 코드 영역
- 동기화 메소드 : 임계 영역을 지정하기 위해 동기화 메소드 제공
                  동기화 메소드 실행하면 즉시 객체에 잠금을 걸어 다른 스레드가 
                  동기화 메소드 실행하지 못하게 함
                  synchronized 붙임, 인스턴스와 정적 메소드 어디든 붙일 수 있음  




<스레드 제어>

- 스레드 객체 생성 후 start() 메소드를 호출하면 바로 실행되는 것이 아니라
  실행 대기 상태가 됨(언제든지 실행할 준비가 되어 있는 상태)
  운영체제는 실행 대기 상태에 있는 스레드 중에서 하나를 선택해서 실행 상태로 만듦


<스레드 상태>

- 실행 상태 : 실행 대기 상태에 있는 스레드 중에서 운영체제는 하나의 스레드를 선택하고
              cpu가 run() 메소드를 실행하도록 하는 것
              실행 상태의 스레드는 run() 메소드를 모두 실행하기 전에 다시 실행 대기 상태로
              돌아갈 수 있음, 그리고 실행 대기상태에 있는 다른 스레드가 선택되어 실행 상태가 됨

- 종료 상태 : 스레드는 실행 대기 상태와 실행 상태를 번갈아가면서 자신의 run() 메소드를 
              조금씩 실행함. run() 메소드가 종료되면, 더 이상 실행 코드가 없기 때문에 
              스레드의 실행은 멈추게 됨. 이 상태가 종료 상태


<스레드 상태 제어>

- 실행 중인 스레드의 상태를 변경하는 것, 멀티 스레드 만들기 위해서는
  정교한 스레드 상태 제어가 필요, 상태 제어가 잘못 되면 프로그램은 불안정해져서 먹통 or 다운
  스레드 제어를 제대로 하기 위해서는 스레드의 상태 변화를 가져오는 메소드 파악해야 함

- 스레드 상태 제어는 주어진 시간 동안 일시 정지시키는 sleep() 메소드와 
  스레드를 안전하게 종료시키는 stop 플래그, interrupt() 메소드 사용

1. interrupt() : 일시 정지 상태의 스레드에서 InterruptedException을 발생시켜, 
                 예외 처리 코드(catch)에서 실행 대기 상태로 가거나 종료상태로 가도록 함

2. sleep(long millis) : 주어진 시간 동안 스레드를 일시 정지 상태로 만듦
                        시간 지나면 자동적으로 실행 대기 상태가 됨
                        주어진 시간이 되기 전 interrupt() 메소드가 호출되면
                        InterruptedException이 발생하기 때문에 예외 처리 필요

3. stop() : 스레드를 즉시 종료. 불안전한 종료를 유발하므로 사용하지 않는 것이 좋음

+ isInterrupted() : 일시정지를 만들지 않고도 interrupt()의 호출 여부 알 수 있음
                   interrupt() 메소드가 호출되었다면 스레드의 interrupted()와 isInterrupted()
                   메소드는 true()를 리턴함


<데몬 스레드>

- 주 스레드의 작업을 돕는 보조적인 역할, 주 스레드가 종료되면 데몬 스레드는 강제적으로
  자동 종료됨, 주 스레드의 보조 역할이기 때문에 주 스레드가 종료되면 존재 의미가 없어짐

  ex) 워드 프로세서의 자동저장(주 스레드 : 워드프로세서)
      미디어 플레이어의 동영상 및 음악 재생 (주 스레드 : 미디어 플레이어)
