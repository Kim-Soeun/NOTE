<라이브러리 살펴보기>

- Gradle은 의존관계가 있는 라이브러리를 함게 다운로드 한다.


  ＊스프링 부트 라이브러리 ＊

   ● spring-boot-starter-web
	● spring-boot-starter-tomcat: 톰캣(웹서버)
	● spring-webmvc : 스프링 웹 MVC
   ● spring-boot-starter-thymeleaf : 타임리프 템플릿 엔진(View)
   ● spring-boot-starter(공통) : 스프링 부트 + 스프링 코어 + 로깅
	● spring-boot
	   ●spring-core
	● spring-boot-starter-logging
	   ● logback, slf4j



   ＊ 테스트 라이브러리 ＊

   ● spring-boot-starter-test
	● junit : 테스트 프레임워크
	● mockito : 목 라이브러리
	● assertj : 테스트 코드를 좀 더 편하게 작성하게 도와주는 라이브러리
	● spring-test: 스프링 통합 테스트 지원


--------------------------------------------------------------------------------------------------------------


<스프링 웹 개발 기초>

  ＊ 웹을 개발하는 세가지 방법 ＊  

     - 정적 컨텐츠
     - MVC와 템플릿 엔진
     - API


1. 정적 컨텐츠

   : 서버에서 따로 가공을 거치지 않고 파일을 웹 브라우저에 그대로 보내는 방식
     원하는 파일을 resources/static 폴더에 넣으면 가공이 들어가지 않고 그대로 반환됨



2. MVC와 템플릿 엔진

   : jsp 같은 것들을 템플릿 엔진이라고 부름 
     정적 컨텐츠처럼 html을 웹 브라우저에 그대로 보내는 것이 아니라, 프로그래밍을 해서 html을 동적으로 바꿔서
     웹 브라우저에 보내는 일을 함. 이런 방법을 사용하기 위해서는 mvc 필요

   - 정적 컨텐츠와의 차이점 : 파일을 웹 페이지에 그대로 전달해주는 것이 정적 컨텐츠의 방식인 반면,
			      MVC와 Template engine 방식은 server에서 약간의 변형을 하여 
			      system을 바꾸서 웹에 띄우는 방식
			      

   ⊙ MVC : Model, View, Controller
   


3. API

   : html과 같은 방식이 아닌, JSON이라는 데이터 구조 포맷으로 클라이언트에게 데이터를 전달하는 방식




-------------------------------------------------------------------------------------------------------------
<스프링 빈과 의존관계>


   * 스프링 빈을 등록하는 2가지 방법 *

     - 컴포넌트 스캔과 자동 의존관계 설정
     - 자바 코드로 직접 스프링 빈 등록하기



   1. 컴포넌트 스캔과 자동 의존관계 설정

      ● @Component 어노테이션이 있으면 스프링 빈으로 자동 등록된다
      ● @Controller 컨트롤러가 스프링 빈으로 자동 등록된 이유도 컴포넌트 스캔 때문이다

      ● @Component 를 포함하는 다음 어노테이션도 스프링 빈으로 자동 등록된다

	- @Controller
        - @Service
        - @Repository	

	

       ※ 참고 : 스프링은 스프링 컨테이너에 스프링 빈을 등록할 때, 기본으로 싱글톤으로 등록한다 
                (유일하게 하나만 등록해서 공유한다) 따라서 같은 스프링 빈이면 모두 같은 인스턴스다. 
                설정으로 싱글톤이 아니게 설정할 수 있지만, 특별한 경우를 제외하면 싱글톤을 사용한다.



   2. 자바 코드로 직접 스프링 빈 등록하기



	package hello.hellospring;

	import hello.hellospring.repository.MemberRepository;
	import hello.hellospring.repository.MemoryMemberRepository;
	import hello.hellospring.service.MemberService;
	import org.springframework.context.annotation.Bean;
	import org.springframework.context.annotation.Configuration;

	@Configuration
	public class SpringConfig {				// 클래스

   	 @Bean
    	public MemberService memberService() {
     	   return new MemberService(memberRepository());	// MemberService 등록
   	 }

   	 @Bean
   	 public MemberRepository memberRepository() {		// MemberRepository 등록
     	   return new MemoryMemberRepository();

   	 }
	}


	※ 참고 : XML로 설정하는 방식도 있지만 최근에는 잘 사용하지 않으므로 생략한다.

	※ 참고 : DI에는 필드 주입, setter 주입, 생성자 주입 이렇게 3가지 방법이 있다.
                 의존관계가 실행중에 동적으로 변하는 경우는 거의 없으므로 생성자 주입을 구너장한다.

	※ 참고 : 실무에서는 주로 정형화된 컨트롤러, 서비스, 리포지토리 같은 코드는 컴포넌트 스캔을 사용한다. 
                 그리고 정형화되지 않거나, 상황에 따라 구현 클래스를 변경해야 하면 설정을 통해 빈으로 등록한다.

	※ 주의 : @Autowired 를 통한 DI는 helloController, MemberService 등과 같이 스프링이 관리하는 객체에서만
                 동작한다. 스프링 빈으로 등록하지 않고 내가 직접 생성한 객체에서는 동작하지 않는다.




--------------------------------------------------------------------------------------------------------------

<단축키>

클래서에 커서두고 ALT + ENTER : create test
