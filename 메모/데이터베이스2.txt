< 데이터베이스 생성 >

 ex) create database test; -- 'test' 이름의 데이터베이스 생성
                           -- 생성 후 한글처리 해주기
     use test;             -- 활성화



< 사용자 계정 생성 >

 ex) CREATE user 'manager' IDENTIFIED by '1234';
    -- manager 사용자 생성, 비밀번호는 1234

 ex) grant all on *.* to 'manager';
    -- 사용자 계정 권한 부여
    -- *.*: 모든 데이터베이스의 모든 테이블
    -- 모든 데이터베이스의 모든 테이블에 사용자 권한 부여함을 의미



< 정의어, 조작어, 제의어 >


1. 데이터 정의어(DDL)

- CREATE : Schema, Domain, Table, View, Index를 정의함

- ALTER : Table에 대한 정의를 변경하는 데 사용함

- DROP : Schema, Domain,Table, View, Index를 삭제함 



2. 데이터 조작어(DML)

- SELECT : 테이블에서 조건에 맞는 튜플을 검색함

- INSERT : 테이블에 새로운 튜플을 삽입함

- DELETE : 테이블에서 조건에 맞는 튜플을 삭제함
 
- UPDATE : 테이블의 조건에 맞는 튜플의 내용을 변경함



3. 데이터 제어어(DCL)

- COMMIT : 데이터베이스 조작 작업이 정상적으로 완료되었음을 관리자에게 알려줌

- ROLLBACK : 데이터베이스 조작 작업이 비정상적으로 종료되었을 때 원래의 상태로 복구함

- GRANT : 데이터베이스 사용자에게 사용권한을 부여함
 
- REVOKE : 데이터베이스 사용자의 사용권한을 취소함



< 테이블 구성요소 >


- 릴레이션 : 데이터베이스는 엑셀처럼 표를 만들어 정보 관리함. 이 표를 릴레이션(테이블)이라 부름

- 튜플 : 릴레이션의 각 행을 레코드라고 함. 공식적으로는 튜플이라고 부름.
         속성의 모임을 가리킴.

- 속성 : 저장하고 싶은 개체의 항목에 해당, 파일 구조상의 데이터 항목 또는 데이터 필드에 해당
         같은 이름의 속성은 존재할 수 없음

- 차수(degree) : 속성의 수, 최소 차수는 1개임, 즉 모든 릴레이션은 적어도 한 개의 속성을 가져야 함

- 도메인 : 릴레이션에 포함된 각각의 속성들이 가질 수 있는 값들의 집합

- 카디날리티 : 튜플의 개수, 유효릴레이션은 카디날리티 0을 가질 수 있음



 ** 릴레이션의 특징 **

 - 한 릴레이션에는 똑같은 튜플이 포함될 수 없음

 - 한 릴레이션에 포함된 튜플 사이에는 순서가 없음

 - 튜플들의 삽입, 삭제 등의 작업으로 인해 릴레이션은 시간에 따라 변함

 - 릴레이션 스키마를 구성하는 속성들 간의 순서는 중요하지 않음

 - 속성의 유일한 식별을 위해 속성의 명칭은 유일해야 함

 - 하지만, 속성을 구성하는 값은 동일한 값이 있을 수 있음

 - 릴레이션을 구성하는 튜플을 유일하게 식별하기 위해 속성들의 부분집합을 키로 설정

 - 속성의 값은 논리적으로 더 이상 쪼갤 수 없는 원자값만을 저장

 


< SQL 데이터 조작문 >


1. SELECT문( 데이터 검색 )

- 테이블의 특정 열 검색
  ex) select 이름, 주소 from 학생;         -- 학생 테이블의 이름, 주소 검색


- 테이블의 모든 열 검색
  ex) select * from 학생;  	           -- 학생 테이블의 모든 정보 검색


- 중복 행을 제거하고 검색
  ex) select distinct 소속학과 from 학생;  -- 학생 테이블의 소속학과 정보를 중복 없이 검색


- 조건 검색

  ex) select 이름, 학년, 소속학과 from 학생 where 학년 >=2 and 소속학과='컴퓨터';

     -- 학생 테이블에서 2학년 이상인 '컴퓨터'학과 학생의 이름, 학년, 소속학과 정보 검색

  ex) select 이름, 학년, 소속학과, 휴대폰번호 from 학생 where (학년>=1 and 학년<=3) or not(소속학과='컴퓨터');
      select 이름, 학년, 소속학과, 휴대폰번호 from 학생 where (학년 between 1 and 3) or not(소속학과='컴퓨터');

     -- 1,2,3 학년 학생이거나 '컴퓨터'학과에 소속되지 않은 학생의 이름, 학년, 소속학과,휴대폰번호 정보 검색  


- 순서화 검색
  
   : ORDER BY 뒤에 ASC(오름차순) 또는 DESC(내림차순) 지정

  ex) select 이름 from 학생 where 소속학과='컴퓨터' order by 학년;
     -- 오름차순 정렬, asc 생략 가능(기본값이기 때문)

  ex) select 이름 from 학생 where 소속학과='컴퓨터' or 소속학과='정보통신' order by 학년 desc; 
     -- desc : 내림차순

  ex) select 학번, 수학, 영어 from 시험 order by 수학 desc, 영어  limit 10; 
     -- 시험 테이블에서 수학점수 1차 내림차순 정렬하고 영어점수 2차 오름차순 정렬하되 
     -- 10개만 학번, 수학, 영어로 검색
